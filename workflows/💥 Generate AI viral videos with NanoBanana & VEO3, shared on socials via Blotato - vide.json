{
  "active": false,
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Update Status to \"DONE\"",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "AI Agent: Generate Video Script",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Format Prompt": {
      "main": [
        [
          {
            "node": "Generate Video with VEO3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM: OpenAI Chat": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Image Prompt",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent: Generate Video Script",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Set Master Prompt": {
      "main": [
        [
          {
            "node": "AI Agent: Generate Video Script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Image Edit": {
      "main": [
        [
          {
            "node": "Download Edited Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Edited Image": {
      "main": [
        [
          {
            "node": "Google Sheets: Read Video Parameters (CONFIG)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Image Prompt": {
      "main": [
        [
          {
            "node": "NanoBanana: Create Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Status to \"DONE\"": {
      "main": [
        [
          {
            "node": "Telegram: Send notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for VEO3 Rendering": {
      "main": [
        [
          {
            "node": "Download Video from VEO3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Video from VEO3": {
      "main": [
        [
          {
            "node": "Rewrite Caption with GPT-4o",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Video with VEO3": {
      "main": [
        [
          {
            "node": "Wait for VEO3 Rendering",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NanoBanana: Create Image": {
      "main": [
        [
          {
            "node": "Wait for Image Edit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent: Generate Video Script",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Telegram: Get Image File": {
      "main": [
        [
          {
            "node": "Google Drive: Upload Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive: Upload Image": {
      "main": [
        [
          {
            "node": "Google Sheets: Log Image & Caption",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram API: Get File URL": {
      "main": [
        [
          {
            "node": "OpenAI Vision: Analyze Reference Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rewrite Caption with GPT-4o": {
      "main": [
        [
          {
            "node": "Save Caption Video to Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Video URL via Telegram": {
      "main": [
        [
          {
            "node": "Send Final Video Preview",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Bot Token (Placeholder)": {
      "main": [
        [
          {
            "node": "Telegram API: Get File URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM: Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Image Prompt",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent: Generate Video Script": {
      "main": [
        [
          {
            "node": "Format Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets: Log Image & Caption": {
      "main": [
        [
          {
            "node": "Set: Bot Token (Placeholder)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Caption Video to Google Sheets": {
      "main": [
        [
          {
            "node": "Send Video URL via Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger: Receive Video Idea": {
      "main": [
        [
          {
            "node": "Set: Bot Token (Placeholder)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram: Get Image File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Vision: Analyze Reference Image": {
      "main": [
        [
          {
            "node": "Google Sheets: Update Image Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets: Update Image Description": {
      "main": [
        [
          {
            "node": "Generate Image Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets: Read Video Parameters (CONFIG)": {
      "main": [
        [
          {
            "node": "Set Master Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-28T22:06:10.014Z",
  "id": "PEGMTD83r346k2Gx",
  "isArchived": false,
  "meta": null,
  "name": "💥 Generate AI viral videos with NanoBanana & VEO3, shared on socials via Blotato - vide",
  "nodes": [
    {
      "parameters": {
        "content": "# 📑 STEP 5 — Auto-Post to All Platforms\n\n",
        "height": 832,
        "width": 1344,
        "color": 4
      },
      "id": "18b1d03c-4759-4517-aed1-e53c65bec909",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1728,
        576
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "fe5773d9-bf7f-4d19-b399-a3f67baaa2fd",
      "name": "Upload Video to BLOTATO",
      "type": "@blotato/n8n-nodes-blotato.blotato",
      "position": [
        1792,
        1200
      ],
      "typeVersion": 2,
      "credentials": {}
    },
    {
      "parameters": {},
      "id": "ac3babee-d4d4-401c-96f2-f98aed92b2c1",
      "name": "Youtube",
      "type": "@blotato/n8n-nodes-blotato.blotato",
      "position": [
        2416,
        992
      ],
      "typeVersion": 2,
      "credentials": {}
    },
    {
      "parameters": {},
      "id": "4f25a06f-b45c-48b4-95bb-ed3260088114",
      "name": "Tiktok",
      "type": "@blotato/n8n-nodes-blotato.blotato",
      "position": [
        2048,
        816
      ],
      "typeVersion": 2,
      "credentials": {}
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "numberInputs": 9
      },
      "id": "1f50683c-facb-4c06-bdbd-499738e78c64",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        2704,
        896
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "sheetName": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "columns": {
          "value": {
            "STATUS": "Published",
            "IMAGE NAME": "={{ $('Telegram Trigger: Receive Video Idea').item.json.message.photo[2].file_unique_id }}"
          },
          "schema": [
            {
              "id": "IMAGE NAME",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "IMAGE NAME",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "IMAGE URL",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "IMAGE URL",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "IMAGE DESCRIPTION",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "IMAGE DESCRIPTION",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "CAPTION",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "CAPTION",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "URL VIDEO FINAL",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "URL VIDEO FINAL",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "TITRE VIDEO",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "TITRE VIDEO",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "CAPTION VIDEO",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "CAPTION VIDEO",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "STATUS",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "STATUS",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "IMAGE NAME"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "5b32026c-d17a-4bbc-8e45-946df2d11ddc",
      "name": "Update Status to \"DONE\"",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        2880,
        1008
      ],
      "typeVersion": 4.5
    },
    {
      "parameters": {},
      "id": "e1e96214-96d6-4df9-bb1b-8dc781e014cb",
      "name": "Linkedin",
      "type": "@blotato/n8n-nodes-blotato.blotato",
      "position": [
        2240,
        816
      ],
      "typeVersion": 2,
      "credentials": {}
    },
    {
      "parameters": {},
      "id": "c3f52e97-16c4-4caf-955a-e7c5a55c4a50",
      "name": "Facebook",
      "type": "@blotato/n8n-nodes-blotato.blotato",
      "position": [
        2416,
        816
      ],
      "typeVersion": 2,
      "credentials": {}
    },
    {
      "parameters": {},
      "id": "b15e1aa5-07ed-4460-88bb-ece6c4ac9d84",
      "name": "Instagram",
      "type": "@blotato/n8n-nodes-blotato.blotato",
      "position": [
        2048,
        992
      ],
      "typeVersion": 2,
      "credentials": {}
    },
    {
      "parameters": {},
      "id": "b3f3dcec-f59a-4e60-8a1a-d4f3de7c0498",
      "name": "Threads",
      "type": "@blotato/n8n-nodes-blotato.blotato",
      "position": [
        2048,
        1200
      ],
      "typeVersion": 2,
      "credentials": {}
    },
    {
      "parameters": {},
      "id": "243d9d75-286d-4333-80d2-e08b6dd3ae73",
      "name": "Bluesky",
      "type": "@blotato/n8n-nodes-blotato.blotato",
      "position": [
        2240,
        1200
      ],
      "typeVersion": 2,
      "credentials": {}
    },
    {
      "parameters": {},
      "id": "3d46d9d6-b596-4172-b438-0dec3d96dce7",
      "name": "Pinterest",
      "type": "@blotato/n8n-nodes-blotato.blotato",
      "position": [
        2416,
        1200
      ],
      "typeVersion": 2,
      "credentials": {}
    },
    {
      "parameters": {},
      "id": "9dc1524a-b345-4867-92f9-94bd0ebd6e35",
      "name": "Twitter (X)",
      "type": "@blotato/n8n-nodes-blotato.blotato",
      "position": [
        2240,
        992
      ],
      "typeVersion": 2,
      "credentials": {}
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "id": "0af56692-d65e-4179-9056-513ec9d5b832",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        1248,
        912
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "id": "a7ee5dd4-e9fd-44e6-a8ff-e947508fc86c",
      "name": "Think",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "position": [
        1392,
        912
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"string\",\n  \"final_prompt\": \"string\"\n}\n"
      },
      "id": "615f3fa7-d237-4c8a-ace1-f1875e867664",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        1536,
        912
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger: Receive Video Idea').item.json.message.chat.id }}",
        "text": "=Url VIDEO : {{ $('Download Video from VEO3').item.json.data.response.resultUrls[0] }}",
        "additionalFields": {}
      },
      "id": "1532d5c4-efa9-4f70-a34a-a75b92dcd273",
      "name": "Send Video URL via Telegram",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1776,
        752
      ],
      "webhookId": "ea6e5974-1930-4b67-a51b-16249a9ed8bd",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{ $json.result.chat.id }}",
        "file": "={{ $('Save Caption Video to Google Sheets').item.json['URL VIDEO FINAL'] }}",
        "additionalFields": {}
      },
      "id": "70944dc3-8a4a-4ac3-83d3-f368a0f89a89",
      "name": "Send Final Video Preview",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1792,
        944
      ],
      "webhookId": "443fd41d-a051-45bf-ad68-173197dba26b",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "1da5dc99-fa95-467f-99bd-4e63b639a17f",
      "name": "Telegram Trigger: Receive Video Idea",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        560,
        128
      ],
      "webhookId": "26dbe6f5-5197-4b2b-9e32-8060f2119686",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cc2e0500-57b1-4615-82cb-1c950e5f2ec4",
              "name": "json_master",
              "type": "string",
              "value": "={\n  \"description\": \"Brief narrative description of the scene, focusing on key visual storytelling and product transformation.\",\n  \"style\": \"cinematic | photorealistic | stylized | gritty | elegant\",\n  \"camera\": {\n    \"type\": \"fixed | dolly | Steadicam | crane combo\",\n    \"movement\": \"describe any camera moves like slow push-in, pan, orbit\",\n    \"lens\": \"optional lens type or focal length for cinematic effect\"\n  },\n  \"lighting\": {\n    \"type\": \"natural | dramatic | high-contrast\",\n    \"sources\": \"key lighting sources (sunset, halogen, ambient glow...)\",\n    \"FX\": \"optional VFX elements like fog, reflections, flares\"\n  },\n  \"environment\": {\n    \"location\": \"describe location or room (kitchen, desert, basketball court...)\",\n    \"set_pieces\": [\n      \"list of key background or prop elements\",\n      \"e.g. hardwood floors, chain-link fence, velvet surface\"\n    ],\n    \"mood\": \"describe the ambient atmosphere (moody, clean, epic...)\"\n  },\n  \"elements\": [\n    \"main physical items involved (product box, accessories, vehicles...)\",\n    \"include brand visibility (logos, packaging, texture...)\"\n  ],\n  \"subject\": {\n    \"character\": {\n      \"description\": \"optional – physical description, outfit\",\n      \"pose\": \"optional – position or gesture\",\n      \"lip_sync_line\": \"optional – spoken line if there’s a voiceover\"\n    },\n    \"product\": {\n      \"brand\": \"Brand name\",\n      \"model\": \"Product model or name\",\n      \"action\": \"description of product transformation or assembly\"\n    }\n  },\n  \"motion\": {\n    \"type\": \"e.g. transformation, explosion, vortex\",\n    \"details\": \"step-by-step visual flow of how elements move or evolve\"\n  },\n  \"VFX\": {\n    \"transformation\": \"optional – describe style (neon trails, motion blur...)\",\n    \"impact\": \"optional – e.g. shockwave, glow, distortion\",\n    \"particles\": \"optional – embers, sparks, thread strands...\",\n    \"environment\": \"optional – VFX affecting the scene (ripples, wind...)\"\n  },\n  \"audio\": {\n    \"music\": \"optional – cinematic score, trap beat, ambient tone\",\n    \"sfx\": [\n      \"list of sound effects (zip, pop, woosh...)\"\n    ],\n    \"ambience\": \"optional – background soundscape (traffic, wind...)\",\n    \"voiceover\": {\n      \"delivery\": \"tone and style (confident, whisper, deep...)\",\n      \"line\": \"text spoken if applicable\"\n    }\n  },\n  \"ending\": \"Final shot description – what is seen or felt at the end (freeze frame, logo pulse, glow...)\",\n  \"text\": \"none | overlay | tagline | logo pulse at end only\",\n  \"format\": \"16:9 | 4k | vertical\",\n  \"keywords\": [\n    \"brand\",\n    \"scene style\",\n    \"motion type\",\n    \"camera style\",\n    \"sound mood\",\n    \"target theme\"\n  ]\n}\n"
            }
          ]
        },
        "options": {}
      },
      "id": "86da9a70-3a44-4fd7-9e5a-5faee3d0e6e3",
      "name": "Set Master Prompt",
      "type": "n8n-nodes-base.set",
      "position": [
        1008,
        688
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create a UGC-style video prompt using both the reference image and the user description.  \n\n**Inputs**  \n- User description (optional):  \n  `{{ $('Telegram Trigger: Receive Video Idea').item.json.message.caption }}`  \n- Reference image analysis (stay strictly faithful to what’s visible):  \n  `{{ $('Google Sheets: Update Image Description').item.json['IMAGE DESCRIPTION'] }}`  \n\n**Rules**  \n- Keep the style casual, authentic, and realistic. Avoid studio-like or cinematic language.  \n- Default model: `veo3_fast` (unless otherwise specified).  \n- Output only **one JSON object** with the key: `video_prompt`.  \n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=system_prompt:\n  ## SYSTEM PROMPT: Structured Video Ad Prompt Generator\n  A - Ask:\n    Generate a structured video ad prompt for cinematic generation, strictly based on the master schema provided in: {{ $json.json_master }}.\n    The final result must be a JSON object with exactly two top-level keys: `title` and `final_prompt`.\n\n  G - Guidance:\n    role: Creative Director\n    output_count: 1\n    character_limit: None\n    constraints:\n      - The output must be valid JSON.\n      - The `title` field should contain a short, descriptive and unique title (max 15 words).\n      - The `final_prompt` field must contain a **single-line JSON string** that follows the exact structure of {{ $json.json_master }} with all fields preserved.\n      - Do not include any explanations, markdown, or extra text — only the JSON object.\n      - Escape all inner quotes in the `final_prompt` string so it is valid as a stringified JSON inside another JSON.\n    tool_usage:\n      - Ensure consistent alignment across all fields (camera, lighting, motion, etc.).\n      - Maintain full structure even for optional fields (use \"none\", \"\", or [] as needed).\n\n  N - Notation:\n    format: JSON\n    expected_output:\n      {\n        \"title\": \"A unique short title for the scene\",\n        \"final_prompt\": \"{...stringified JSON of the full prompt...}\"\n      }\n\n"
        }
      },
      "id": "e05796c8-7819-4e69-a420-7b8a9569106d",
      "name": "AI Agent: Generate Video Script",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1328,
        688
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.kie.ai/api/v1/veo/generate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={\n  \"prompt\": {{ $json.prompt }},\n  \"model\": \"{{ $('Google Sheets: Read Video Parameters (CONFIG)').item.json.model }}\",\n  \"aspectRatio\": \"{{ $json.aspectRatio }}\",\n  \"imageUrls\": [\n    \"{{ $('Download Edited Image').item.json.images[0].url }}\"\n  ]\n}",
        "options": {}
      },
      "id": "f54804ea-ce4e-4e4a-95a3-5f416014583c",
      "name": "Generate Video with VEO3",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        608,
        1200
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "amount": 20
      },
      "id": "f60523c3-2532-4cba-9793-4a600e266e59",
      "name": "Wait for VEO3 Rendering",
      "type": "n8n-nodes-base.wait",
      "position": [
        816,
        1200
      ],
      "webhookId": "f6d814f3-4eb8-4629-a920-134cfa4ea03b",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "url": "https://api.kie.ai/api/v1/veo/record-info",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "taskId",
              "value": "={{ $('Generate Video with VEO3').item.json.data.taskId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "71d10166-5a1a-4b4a-9f9c-f8af347d8137",
      "name": "Download Video from VEO3",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1024,
        1200
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "=You are rewriting a TikTok video script, caption, and overlay —\nnot inventing a new one. You must follow this format and obey\nthese rules strictly.\n---\n### CONTEXT:\nHere is the content idea to use:{{ $('Telegram Trigger: Receive Video Idea').item.json.message.caption }}\n\nand the Title is : {{ $('AI Agent: Generate Video Script').item.json.output.title }}\n\n\nWrite the caption text using the topic.\n\n---\n- MUST be under 200 characters (yes \"Characters\" not wordcount)\nthis is an absolute MUST, no more than 200 characters!!! \n\n### FINAL OUTPUT FORMAT (no markdown formatting):\n\nDO NOT return any explanations. Only return the Caption Text\n"
            }
          ]
        },
        "options": {}
      },
      "id": "60844fab-4464-4ea0-a8df-21e6c469bcb7",
      "name": "Rewrite Caption with GPT-4o",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        1184,
        1200
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "sheetName": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "columns": {
          "value": {
            "STATUS": "CREATE",
            "IMAGE NAME": "={{ $('Telegram Trigger: Receive Video Idea').item.json.message.photo[2].file_unique_id }}",
            "TITRE VIDEO": "={{ $('AI Agent: Generate Video Script').item.json.output.title }}",
            "CAPTION VIDEO": "={{ $json.message.content }}",
            "URL VIDEO FINAL": "={{ $('Download Video from VEO3').item.json.data.response.resultUrls[0] }}"
          },
          "schema": [
            {
              "id": "IMAGE NAME",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "IMAGE NAME",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "IMAGE URL",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "IMAGE URL",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "IMAGE DESCRIPTION",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "IMAGE DESCRIPTION",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "CAPTION",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "CAPTION",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "URL VIDEO FINAL",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "URL VIDEO FINAL",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "TITRE VIDEO",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "TITRE VIDEO",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "CAPTION VIDEO",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "CAPTION VIDEO",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "STATUS",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "STATUS",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "IMAGE NAME"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "65940b65-84c3-49c6-af0a-4e923e216545",
      "name": "Save Caption Video to Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        1488,
        1200
      ],
      "typeVersion": 4.6
    },
    {
      "parameters": {
        "jsCode": "const structuredPrompt = $input.first().json.output.final_prompt;\nreturn {\n  json: {\n    prompt: JSON.stringify(structuredPrompt), // this escapes it correctly!\n    model: \"veo3_fast\",\n    aspectRatio: \"16:9\"\n  }\n};\n"
      },
      "id": "47e99aa1-e476-4672-88d4-92ecd011d2af",
      "name": "Format Prompt",
      "type": "n8n-nodes-base.code",
      "position": [
        608,
        896
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "# 📑 STEP 3 — Generate Video Ad Script",
        "height": 460,
        "width": 1180
      },
      "id": "8ebd2473-3ba1-4404-a03d-f9bb1cb572b1",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        496,
        576
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# 📑 STEP 4 — Generate Video with VEO3",
        "height": 320,
        "width": 1180
      },
      "id": "81514227-c247-4ea8-aac9-f37dddcb6e60",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        496,
        1088
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# 📑 STEP 1 — Collect Idea & Image",
        "height": 592,
        "width": 1184
      },
      "id": "94570c57-df66-407f-b543-d54ff41f9b01",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        496,
        -64
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# 📑 STEP 2 — Create Image with NanoBanana\n",
        "height": 592,
        "width": 1328
      },
      "id": "873af574-34b4-4c7f-8a77-ba0e74d9ed3e",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1728,
        -64
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.photo[2].file_id }}",
        "additionalFields": {}
      },
      "id": "4a4f4728-33e6-4ee3-8287-13e4a51a42f3",
      "name": "Telegram: Get Image File",
      "type": "n8n-nodes-base.telegram",
      "position": [
        992,
        16
      ],
      "webhookId": "06ceb31d-dcd9-4a9a-bbbe-a7bf7ae0ad4a",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "name": "={{ $('Telegram Trigger: Receive Video Idea').item.json.message.photo[2].file_unique_id }}",
        "driveId": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "folderId": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "options": {}
      },
      "id": "04740bfc-85d2-4bb8-b13b-fd39b346aba0",
      "name": "Google Drive: Upload Image",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        992,
        192
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "sheetName": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "columns": {
          "value": {
            "STATUS": "EN COURS",
            "CAPTION": "={{ $('Telegram Trigger: Receive Video Idea').item.json.message.caption }}",
            "IMAGE URL": "={{ $json.webContentLink }}",
            "IMAGE NAME": "={{ $('Telegram Trigger: Receive Video Idea').item.json.message.photo[2].file_unique_id }}"
          },
          "schema": [
            {
              "id": "IMAGE NAME",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "IMAGE NAME",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "IMAGE URL",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "IMAGE URL",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "IMAGE DESCRIPTION",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "IMAGE DESCRIPTION",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "CAPTION",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "CAPTION",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "STATUS",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "STATUS",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "IMAGE NAME"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "ec6feaf3-74e3-4916-82a0-cea9d17c3934",
      "name": "Google Sheets: Log Image & Caption",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        992,
        368
      ],
      "typeVersion": 4.7
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "af62651a-3fc8-419d-908b-6514f6f4bcb3",
              "name": "YOUR_BOT_TOKEN",
              "type": "string",
              "value": ""
            }
          ]
        },
        "options": {}
      },
      "id": "e67e08b3-d574-41e5-ae9a-052d3e2a01a2",
      "name": "Set: Bot Token (Placeholder)",
      "type": "n8n-nodes-base.set",
      "position": [
        1248,
        128
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "url": "=https://api.telegram.org/bot{{ $json.YOUR_BOT_TOKEN }}/getFile?file_id={{ $('Telegram Trigger: Receive Video Idea').item.json.message.photo[3].file_id }}",
        "options": {}
      },
      "id": "5a1359af-3caf-45f9-923c-caef4e4631ba",
      "name": "Telegram API: Get File URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1440,
        128
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "chatgpt-4o-latest",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "text": "=You are an image analysis assistant.\n\nYour task is to analyze the given image and output results **only in YAML format**. Do not add explanations, comments, or extra text outside YAML.\n\nRules:\n\n- If the image depicts a **product**, return:\n    \n    ```yaml\n    brand_name: (brand if visible or inferable)\n    color_scheme:\n      - hex: (hex code of each prominent color)\n        name: (descriptive name of the color)\n    font_style: (serif/sans-serif, bold/thin, etc.)\n    visual_description: (1–2 sentences summarizing what is seen, ignoring the background)\n    \n    ```\n    \n- If the image depicts a **character**, return:\n    \n    ```yaml\n    character_name: (name if visible or inferable, else \"unknown\")\n    color_scheme:\n      - hex: (hex code of each prominent color on the character)\n        name: (descriptive name of the color)\n    outfit_style: (clothing style, accessories, or notable features)\n    visual_description: (1–2 sentences summarizing what the character looks like, ignoring the background)\n    \n    ```\n    \n- If the image depicts **both**, return **both sections** in YAML.\n\nOnly output valid YAML. No explanations.",
        "imageUrls": "=https://api.telegram.org/file/bot{{ $('Set: Bot Token (Placeholder)').item.json.YOUR_BOT_TOKEN }}/{{ $json.result.file_path }}",
        "options": {}
      },
      "id": "f966094f-816d-443f-bd0a-26ac49ffd8ea",
      "name": "OpenAI Vision: Analyze Reference Image",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        1856,
        128
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "sheetName": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "columns": {
          "value": {
            "IMAGE NAME": "={{ $('Telegram Trigger: Receive Video Idea').item.json.message.photo[2].file_unique_id }}",
            "IMAGE DESCRIPTION": "={{ $json.content }}"
          },
          "schema": [
            {
              "id": "IMAGE NAME",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "IMAGE NAME",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "IMAGE URL",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "IMAGE URL",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "IMAGE DESCRIPTION",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "IMAGE DESCRIPTION",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "CAPTION",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "CAPTION",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "STATUS",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "STATUS",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "IMAGE NAME"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "92eb2228-7f68-4e7a-aeae-cb02941391d4",
      "name": "Google Sheets: Update Image Description",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        2096,
        128
      ],
      "typeVersion": 4.7
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"image_prompt\": \"string\"\n}"
      },
      "id": "1fc6fce1-b3c7-43fb-beaf-b81d5e7f54c8",
      "name": "LLM: Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        2480,
        368
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "id": "dbe304a3-0e90-46ef-b432-b2f8832abf49",
      "name": "LLM: OpenAI Chat",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        2272,
        368
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your task is to create an image prompt following the system guidelines.  \nEnsure that the reference image is represented as **accurately as possible**, including all text elements.  \n\nUse the following inputs:  \n\n- **User’s description:**  \n{{ $json.CAPTION }}\n\n- **Reference image description:**  \n{{ $json['IMAGE DESCRIPTION'] }}\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=ROLE: UGC Image Prompt Builder  \n\nGOAL:  \nGenerate one concise, natural, and realistic image prompt (≤120 words) from a given product or reference image. The prompt must simulate authentic UGC (user-generated content) photography.  \n\nRULES:  \n- Always output **one JSON object only** with the key:  \n  - `image_prompt`: (string with full description)  \n- Do **not** add commentary, metadata, or extra keys. JSON only.  \n\nSTYLE GUIDELINES:  \n- Tone: casual, unstaged, lifelike, handheld snapshot.  \n- Camera cues: include at least 2–3 (e.g., phone snapshot, handheld framing, off-center composition, natural indoor light, soft shadows, slight motion blur, auto exposure, unpolished look, mild grain).  \n- Realism: embrace imperfections (wrinkles, stray hairs, skin texture, clutter, smudges).  \n- Packaging/Text: preserve exactly as visible. Never invent claims, numbers, or badges.  \n- Diversity: if people appear but are unspecified, vary gender/ethnicity naturally; default age range = 21–38.  \n- Setting: default to real-world everyday spaces (home, street, store, gym, office).  \n\nSAFETY:  \n- No copyrighted character names.  \n- No dialogue or scripts. Only describe scenes.  \n\nOUTPUT CONTRACT:  \n- JSON only, no prose outside.  \n- Max 120 words in `image_prompt`.  \n- Must cover: subject, action, mood, setting, style/camera, colors, and text accuracy.  \n\nCHECKLIST BEFORE OUTPUT:  \n- Natural handheld tone?  \n- At least 2 camera cues included?  \n- Product text preserved exactly?  \n- Only JSON returned?  \n\n---  \n\n### Example  \n\nGood Example :  \n```json\n{ \"image_prompt\": \"a young adult casually holding a skincare tube near a bathroom mirror; action: dabs small amount on the back of the hand; mood: easy morning; setting: small apartment bathroom with towel on rack and toothbrush cup; style/camera: phone snapshot, handheld framing, off-center composition, natural window light, slight motion blur, mild grain; colors: soft whites and mint label; text accuracy: keep every word on the tube exactly as visible, no added claims\" }\n"
        }
      },
      "id": "61b31ea1-2108-417e-88f6-47002d525fdf",
      "name": "Generate Image Prompt",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2320,
        128
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://queue.fal.run/fal-ai/nano-banana/edit",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\t\"prompt\": \"{{ $json.output.image_prompt.replace(/\\\"/g, '\\\\\\\"').replace(/\\n/g, '\\\\n') }}\",\n\"image_urls\": [\"{{ $('Google Drive: Upload Image').item.json.webContentLink }}\"]\n\n}\n\n",
        "options": {}
      },
      "id": "08cb00b8-013c-4538-954b-f86dc77ffd8f",
      "name": "NanoBanana: Create Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2656,
        128
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "amount": 20
      },
      "id": "ff533b63-ab2d-47e4-8188-bdd50e2fd7d3",
      "name": "Wait for Image Edit",
      "type": "n8n-nodes-base.wait",
      "position": [
        2864,
        128
      ],
      "webhookId": "df52d997-45c4-431f-bdf6-89dd25027b5b",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "url": "={{ $json.response_url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "id": "88e54c04-5cbf-4e85-af1f-02c075d719c3",
      "name": "Download Edited Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2864,
        352
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "sheetName": {
          "__rl": true,
          "mode": "id",
          "value": "="
        },
        "options": {}
      },
      "id": "154715c3-a1fb-43ed-93a4-3789227706e9",
      "name": "Google Sheets: Read Video Parameters (CONFIG)",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        800,
        688
      ],
      "typeVersion": 4.6
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger: Receive Video Idea').item.json.message.chat.id }}",
        "text": "Published",
        "additionalFields": {}
      },
      "id": "4a9aae50-059e-4238-94d3-4fd9ba3fa70c",
      "name": "Telegram: Send notification",
      "type": "n8n-nodes-base.telegram",
      "position": [
        2880,
        1216
      ],
      "webhookId": "2f4a4bc1-99de-4e93-8523-dd8c6499b893",
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "# 🎬 Generate AI viral videos with NanoBanana & VEO3, shared on socials via Blotato (By Dr. Firas)\n\n\n# 🎥 Full Tutorial :\n[![AI Voice Agent Preview](https://www.dr-firas.com/nanobanana.png)](https://youtu.be/nlwpbXQqNQ4)\n\n---\n\n# 📘 Documentation  \nAccess detailed setup instructions, API config, platform connection guides, and workflow customization tips:\n\n📎 [Open the full documentation on Notion](https://automatisation.notion.site/NonoBanan-2643d6550fd98041aef5dcbe8ab0f7a1?source=copy_link)\n\n---\n\n# ⚙️ Requirements\n\n1. ✅ **Create a [Blotato](https://blotato.com/?ref=firas) account** (Pro plan required for API access)  \n2. 🔑 **Generate your Blotato API Key** via: `Settings > API > Generate API Key`  \n3. 📦 **Enable “Verified Community Nodes”** in the n8n admin settings  \n4. 🧩 **Install the Blotato** verified community node in n8n  \n5. 🛠 **Create a Blotato API credential** inside your n8n credentials tab  \n6. 📄 **Duplicate this [Google Sheet template](https://docs.google.com/spreadsheets/d/1FutmZHblwnk36fp59fnePjONzuJBdndqZOCuRoGWSmY/edit?usp=sharing)**  \n7. ☁️ **Make sure your Google Drive folder is PUBLIC** (anyone with the link can access)  \n8. 📌 **Complete the 3 brown sticky note steps** inside the workflow editor\n\n",
        "height": 1476,
        "width": 700,
        "color": 6
      },
      "id": "f56268c8-94ad-4d67-8277-ecbc5119787c",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -224,
        -64
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-28T22:06:10.019Z",
      "updatedAt": "2025-10-28T22:06:10.019Z",
      "role": "workflow:owner",
      "workflowId": "PEGMTD83r346k2Gx",
      "projectId": "zIvgruNDMJwjqAqX"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-10-28T19:20:07.740Z",
      "updatedAt": "2025-10-28T19:20:07.740Z",
      "id": "wJiOGkz2H7JcARnq",
      "name": "Social media"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-10-28T22:07:11.000Z",
  "versionId": "0c638e56-c1fd-4a01-8c4f-3a8d99d6bdec"
}